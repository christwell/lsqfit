To install:

1. If not already installed, download and install the following packages:

	a. The Gnu Scientific Library (gsl) - provides standard numerical 
		analysis packages in C.
		(http://www.gnu.org/software/gsl/)
		
	b. The numpy python library - provides fast floating-point array 
		operations in python.
		(http://numpy.scipy.org/)

	c. The cython python package - provides a variant of python that 
		compiles into C code that can itself be compiled and is faster (but
      less flexible) than ordinary python. Versions earlier than 0.14
		don't work. 
		(http://www.cython.org/)
				
	The lsqfit code works for Python 2.6 and 2.7, and Python 3.2. It does
	not work for Python versions 2.5.X or earlier. It has not been tested 
	for Python 3.0 and 3.1, but likely works at least with the latter. Very
	limited testing suggests that fitting is faster with 2.7 than 3.2.
		
2. Use 'make install'. This will build gvar.so and lsqfit_util.so, and then 
	copy them and lsqfit.py to a standard directory in the user's space
	that Python knows about. A list of the installed files is stored in 
	file installed-files (in case, for example, you want to uninstall them).
	
	The path for the installation directory is given in site.USER_SITE from 
	the site module in Python: eg, get it from the Python using
				
				python -c 'import site; print site.USER_SITE' 
				
	N.B. If you have previously installed older versions of lsqfit,
	consider removing the earlier modules to make sure that the new ones are 
	used by Python. This will not happen if the new modules overwrite
	the older ones, but could happen if the new modules are written to a 
	different place. Find out where the older modules are stored by
	using 'pydoc gvar' and/or 'pydoc lsqfit' before installing the new 
	software (pydoc lists the location of the module under "FILE").
	
	N.B. To install lsqfit for an alternative version of python, say python3 
	for example, use 'make PYTHON=python3 install'. Python's standard 
	directories are structured in such a way that it is necessary to do 
	a separate installation for each python version that will be used for 
	lsqfit.
	
	N.B. Rather than using make and the makefile, one can instead use standard
	distutils commands: eg, python setup.py install --user
	
3. (Optional) Run 'make tests' to test your installation of lsqfit if you
	are using Python 2.7 or later (they don't work with Python 2.6). The tests
	are grouped into several sets of related tests. The tests for each set have
	been successful if the output for that set ends with "OK". Some tests 
	involve random numbers and so may occasionally --- less than 1 in 100 runs 
	--- fail due to rare multi-sigma fluctuations; rerun the tests if they do 
	fail. Contact g.p.lepage@cornell.edu if there are persistent, frequent 
	failures.
	
4. (Optional) Change to subdirectory examples/ and look at some of the sample 
	.py files given there that use lsqfit. Run them one by one --- 
	"python simple.py" etc --- or all at once using "make run".
	
5. (Optional) Use 'make clean' to erase work files and directories.


# Copyright (c) 2008-2012 G. Peter Lepage. 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version (see <http://www.gnu.org/licenses/>).
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
