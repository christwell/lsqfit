#!/usr/bin/env python
# encoding: utf-8
"""
nist.py - These are fits used by NIST to test nonlinear fitters.
See http://www.itl.nist.gov/div898/strd/nls/nls_main.shtml.

Here have included all 8 of the fits of a "higher level of difficulty"
from their set. To convert their problems into lsqfit problems I
added their "standard deviation of residuals" as an error to the
y values; this is the value you would get by adding an
uncorrelated error to each y and adjusting the width to maximize
logGBF. I also gave priors to the fit parameters, generally making
them roughly 20x wider than the result, with mean 0; these priors
are too wide to affect the fits and serve mainly to suggest starting
values for the fitter. The results from the fit are compared
(see assert statements) with NIST's "certified values".
"""
# Copyright (c) 2016 G. Peter Lepage.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version (see <http://www.gnu.org/licenses/>).
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

from __future__ import print_function

import gvar as gv
import numpy as np
import lsqfit

def main():
    mgh09()
    thurber()
    boxbod()
    rat42()
    mgh10()
    eckerle4()
    rat43()
    bennett5()

def mgh09():
    name = 'mgh09'
    print(20 * '=', name)
    rawdata = np.array([
       [1.957000e-01,  4.000000e+00],
       [1.947000e-01,  2.000000e+00],
       [1.735000e-01,  1.000000e+00],
       [1.600000e-01,  5.000000e-01],
       [8.440000e-02,  2.500000e-01],
       [6.270000e-02,  1.670000e-01],
       [4.560000e-02,  1.250000e-01],
       [3.420000e-02,  1.000000e-01],
       [3.230000e-02,  8.330000e-02],
       [2.350000e-02,  7.140000e-02],
       [2.460000e-02,  6.250000e-02],
       ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0.0000(66)')
    def fcn(x, beta):
        return (beta[0] * (x**2 + beta[1] * x)) / (x**2 + x * beta[2] + beta[3])
    prior = gv.gvar(4 * ['0(100)'])
    fit = lsqfit.nonlinear_fit(prior=prior, data=(x, y), fcn=fcn, tol=1e-10)
    print(fit)
    assert str(fit.p) == '[0.193(11) 0.19(20) 0.123(81) 0.136(90)]', name

def thurber():
    name = 'thurber'
    print(20 * '=', name)
    rawdata = np.array([
        [  80.574e0,  -3.067e0],
        [  84.248e0,  -2.981e0],
        [  87.264e0,  -2.921e0],
        [  87.195e0,  -2.912e0],
        [  89.076e0,  -2.840e0],
        [  89.608e0,  -2.797e0],
        [  89.868e0,  -2.702e0],
        [  90.101e0,  -2.699e0],
        [  92.405e0,  -2.633e0],
        [  95.854e0,  -2.481e0],
        [ 100.696e0,  -2.363e0],
        [ 101.060e0,  -2.322e0],
        [ 401.672e0,  -1.501e0],
        [ 390.724e0,  -1.460e0],
        [ 567.534e0,  -1.274e0],
        [ 635.316e0,  -1.212e0],
        [ 733.054e0,  -1.100e0],
        [ 759.087e0,  -1.046e0],
        [ 894.206e0,  -0.915e0],
        [ 990.785e0,  -0.714e0],
        [1090.109e0,  -0.566e0],
        [1080.914e0,  -0.545e0],
        [1122.643e0,  -0.400e0],
        [1178.351e0,  -0.309e0],
        [1260.531e0,  -0.109e0],
        [1273.514e0,  -0.103e0],
        [1288.339e0,   0.010e0],
        [1327.543e0,   0.119e0],
        [1353.863e0,   0.377e0],
        [1414.509e0,   0.790e0],
        [1425.208e0,   0.963e0],
        [1421.384e0,   1.006e0],
        [1442.962e0,   1.115e0],
        [1464.350e0,   1.572e0],
        [1468.705e0,   1.841e0],
        [1447.894e0,   2.047e0],
        [1457.628e0,   2.200e0],
        ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0(13.7)')
    def fcn(x, b):
        return (
            (b[0] + b[1] * x + b[2] * x**2 + b[3] * x**3) /
            (1. + b[4] * x + b[5] * x**2 + b[6] * x**3)
            )
    prior = gv.gvar([
        '0(10000)', '0(10000)', '0(5000)', '0(1000)', '0(10)', '0(10)', '0(1)'
        ])
    fit = lsqfit.nonlinear_fit(prior=prior, data=(x, y), fcn=fcn, tol=1e-10)
    print(fit)
    assert (str(fit.p) ==
        '[1288.1(4.7) 1491(40) 583(29) 75.4(5.6) 0.966(31) 0.398(15) 0.0497(66)]'
        ), name

def boxbod():
    name = 'boxbod'
    print(20 * '=', name)
    rawdata = np.array([
        [109.,   1.],
        [149.,   2.],
        [149.,   3.],
        [191.,   5.],
        [213.,   7.],
        [224.,  10.],
        ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0(17.1)')
    def fcn(x, b):
        return b[0] * (1. - gv.exp(-b[1] * x))
    prior = gv.gvar([
        '0(4000)', '0(2)',
        ])
    fit = lsqfit.nonlinear_fit(prior=prior, data=(x, y), fcn=fcn, tol=1e-10)
    print(fit)
    assert str(fit.p) == '[214(12) 0.55(10)]', name

def rat42():
    name = 'rat42'
    print(20 * '=', name)
    rawdata = np.array([
        [ 8.930e0,   9.000e0],
        [10.800e0,  14.000e0],
        [18.590e0,  21.000e0],
        [22.330e0,  28.000e0],
        [39.350e0,  42.000e0],
        [56.110e0,  57.000e0],
        [61.730e0,  63.000e0],
        [64.620e0,  70.000e0],
        [67.080e0,  79.000e0],
        ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0(1.15877)')
    def fcn(x, b):
        return b[0] / (1. + gv.exp(b[1] - b[2] * x))
    prior = gv.gvar([
        '0(1500)', '0(50)', '0(1)'
        ])
    fit = lsqfit.nonlinear_fit(prior=prior, data=(x, y), fcn=fcn, tol=1e-10)
    print(fit)
    assert str(fit.p) == '[72.5(1.7) 2.618(88) 0.0674(34)]', name

def mgh10():
    name = 'mgh10'
    print(20 * '=', name)
    rawdata = np.array([
        [3.478000e+04,  5.000000e+01],
        [2.861000e+04,  5.500000e+01],
        [2.365000e+04,  6.000000e+01],
        [1.963000e+04,  6.500000e+01],
        [1.637000e+04,  7.000000e+01],
        [1.372000e+04,  7.500000e+01],
        [1.154000e+04,  8.000000e+01],
        [9.744000e+03,  8.500000e+01],
        [8.261000e+03,  9.000000e+01],
        [7.030000e+03,  9.500000e+01],
        [6.005000e+03,  1.000000e+02],
        [5.147000e+03,  1.050000e+02],
        [4.427000e+03,  1.100000e+02],
        [3.820000e+03,  1.150000e+02],
        [3.307000e+03,  1.200000e+02],
        [2.872000e+03,  1.250000e+02],
        ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0(2.600974)')
    def fcn(x, b):
        return b[0] * gv.exp(b[1] / (x + b[2]))
    prior = gv.gvar([
        '0.0(1)', '0(100000)', '0(10000)'
        ])
    fit = lsqfit.nonlinear_fit(prior=prior, data=(x, y), fcn=fcn, tol=1e-10)
    print(fit)
    assert str(fit.p) == '[0.00561(16) 6181(23) 345.22(78)]', name

def eckerle4():
    name = 'eckerle4'
    print(20 * '=', name)
    rawdata = np.array([
        [0.0001575e0,   400.000000e0],
        [0.0001699e0,   405.000000e0],
        [0.0002350e0,   410.000000e0],
        [0.0003102e0,   415.000000e0],
        [0.0004917e0,   420.000000e0],
        [0.0008710e0,   425.000000e0],
        [0.0017418e0,   430.000000e0],
        [0.0046400e0,   435.000000e0],
        [0.0065895e0,   436.500000e0],
        [0.0097302e0,   438.000000e0],
        [0.0149002e0,   439.500000e0],
        [0.0237310e0,   441.000000e0],
        [0.0401683e0,   442.500000e0],
        [0.0712559e0,   444.000000e0],
        [0.1264458e0,   445.500000e0],
        [0.2073413e0,   447.000000e0],
        [0.2902366e0,   448.500000e0],
        [0.3445623e0,   450.000000e0],
        [0.3698049e0,   451.500000e0],
        [0.3668534e0,   453.000000e0],
        [0.3106727e0,   454.500000e0],
        [0.2078154e0,   456.000000e0],
        [0.1164354e0,   457.500000e0],
        [0.0616764e0,   459.000000e0],
        [0.0337200e0,   460.500000e0],
        [0.0194023e0,   462.000000e0],
        [0.0117831e0,   463.500000e0],
        [0.0074357e0,   465.000000e0],
        [0.0022732e0,   470.000000e0],
        [0.0008800e0,   475.000000e0],
        [0.0004579e0,   480.000000e0],
        [0.0002345e0,   485.000000e0],
        [0.0001586e0,   490.000000e0],
        [0.0001143e0,   495.000000e0],
        [0.0000710e0,   500.000000e0],
        ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0.0 +- 6.7629245447e-03')
    def fcn(x, b):
        return (b[0] / b[1]) * gv.exp(-0.5 * ((x-b[2]) / b[1]) ** 2)
    # this is a little bit sensitive to the prior for b[1]
    # should really force b[1] to be positive (ambiguous as is).
    # And/or should replace 1/b[1] by b[1], to avoid infinities at 0.
    prior = gv.gvar([
        '0(1000)', '0(1000)', '0(10000)'
        ])
    fit = lsqfit.nonlinear_fit(
        prior=prior, data=(x, y), fcn=fcn, tol=1e-10,
        )
    print(fit)
    assert str(fit.p) == '[1.554(15) 4.089(47) 451.541(47)]', name

def rat43():
    name = 'rat43'
    print(20 * '=', name)
    rawdata = np.array([
        [ 16.08e0,   1.0e0],
        [ 33.83e0,   2.0e0],
        [ 65.80e0,   3.0e0],
        [ 97.20e0,   4.0e0],
        [191.55e0,   5.0e0],
        [326.20e0,   6.0e0],
        [386.87e0,   7.0e0],
        [520.53e0,   8.0e0],
        [590.03e0,   9.0e0],
        [651.92e0,  10.0e0],
        [724.93e0,  11.0e0],
        [699.56e0,  12.0e0],
        [689.96e0,  13.0e0],
        [637.56e0,  14.0e0],
        [717.41e0,  15.0e0],
        ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0 +- 2.8262414662E+01')
    def fcn(x, b):
        b1, b2, b3, b4 = b
        return b1 / ((1 + gv.exp(b2 - b3*x)) ** (1. / b4))
    prior = gv.gvar([
        '0(10000)', '0(100)', '0(20)', '0(20)'
        ])
    fit = lsqfit.nonlinear_fit(prior=prior, data=(x, y), fcn=fcn, tol=1e-10)
    print(fit)
    assert str(fit.p) == '[700(16) 5.3(2.1) 0.76(20) 1.28(69)]', name

def bennett5():
    name = 'bennett5'
    print(20 * '=', name)
    rawdata = np.array([
        [-34.834702e0,   7.447168e0],
        [-34.393200e0,   8.102586e0],
        [-34.152901e0,   8.452547e0],
        [-33.979099e0,   8.711278e0],
        [-33.845901e0,   8.916774e0],
        [-33.732899e0,   9.087155e0],
        [-33.640301e0,   9.232590e0],
        [-33.559200e0,   9.359535e0],
        [-33.486801e0,   9.472166e0],
        [-33.423100e0,   9.573384e0],
        [-33.365101e0,   9.665293e0],
        [-33.313000e0,   9.749461e0],
        [-33.260899e0,   9.827092e0],
        [-33.217400e0,   9.899128e0],
        [-33.176899e0,   9.966321e0],
        [-33.139198e0,  10.029280e0],
        [-33.101601e0,  10.088510e0],
        [-33.066799e0,  10.144430e0],
        [-33.035000e0,  10.197380e0],
        [-33.003101e0,  10.247670e0],
        [-32.971298e0,  10.295560e0],
        [-32.942299e0,  10.341250e0],
        [-32.916302e0,  10.384950e0],
        [-32.890202e0,  10.426820e0],
        [-32.864101e0,  10.467000e0],
        [-32.841000e0,  10.505640e0],
        [-32.817799e0,  10.542830e0],
        [-32.797501e0,  10.578690e0],
        [-32.774300e0,  10.613310e0],
        [-32.757000e0,  10.646780e0],
        [-32.733799e0,  10.679150e0],
        [-32.716400e0,  10.710520e0],
        [-32.699100e0,  10.740920e0],
        [-32.678799e0,  10.770440e0],
        [-32.661400e0,  10.799100e0],
        [-32.644001e0,  10.826970e0],
        [-32.626701e0,  10.854080e0],
        [-32.612202e0,  10.880470e0],
        [-32.597698e0,  10.906190e0],
        [-32.583199e0,  10.931260e0],
        [-32.568699e0,  10.955720e0],
        [-32.554298e0,  10.979590e0],
        [-32.539799e0,  11.002910e0],
        [-32.525299e0,  11.025700e0],
        [-32.510799e0,  11.047980e0],
        [-32.499199e0,  11.069770e0],
        [-32.487598e0,  11.091100e0],
        [-32.473202e0,  11.111980e0],
        [-32.461601e0,  11.132440e0],
        [-32.435501e0,  11.152480e0],
        [-32.435501e0,  11.172130e0],
        [-32.426800e0,  11.191410e0],
        [-32.412300e0,  11.210310e0],
        [-32.400799e0,  11.228870e0],
        [-32.392101e0,  11.247090e0],
        [-32.380501e0,  11.264980e0],
        [-32.366001e0,  11.282560e0],
        [-32.357300e0,  11.299840e0],
        [-32.348598e0,  11.316820e0],
        [-32.339901e0,  11.333520e0],
        [-32.328400e0,  11.349940e0],
        [-32.319698e0,  11.366100e0],
        [-32.311001e0,  11.382000e0],
        [-32.299400e0,  11.397660e0],
        [-32.290699e0,  11.413070e0],
        [-32.282001e0,  11.428240e0],
        [-32.273300e0,  11.443200e0],
        [-32.264599e0,  11.457930e0],
        [-32.256001e0,  11.472440e0],
        [-32.247299e0,  11.486750e0],
        [-32.238602e0,  11.500860e0],
        [-32.229900e0,  11.514770e0],
        [-32.224098e0,  11.528490e0],
        [-32.215401e0,  11.542020e0],
        [-32.203800e0,  11.555380e0],
        [-32.198002e0,  11.568550e0],
        [-32.189400e0,  11.581560e0],
        [-32.183601e0,  11.594420e0],
        [-32.174900e0,  11.607121e0],
        [-32.169102e0,  11.619640e0],
        [-32.163300e0,  11.632000e0],
        [-32.154598e0,  11.644210e0],
        [-32.145901e0,  11.656280e0],
        [-32.140099e0,  11.668200e0],
        [-32.131401e0,  11.679980e0],
        [-32.125599e0,  11.691620e0],
        [-32.119801e0,  11.703130e0],
        [-32.111198e0,  11.714510e0],
        [-32.105400e0,  11.725760e0],
        [-32.096699e0,  11.736880e0],
        [-32.090900e0,  11.747890e0],
        [-32.088001e0,  11.758780e0],
        [-32.079300e0,  11.769550e0],
        [-32.073502e0,  11.780200e0],
        [-32.067699e0,  11.790730e0],
        [-32.061901e0,  11.801160e0],
        [-32.056099e0,  11.811480e0],
        [-32.050301e0,  11.821700e0],
        [-32.044498e0,  11.831810e0],
        [-32.038799e0,  11.841820e0],
        [-32.033001e0,  11.851730e0],
        [-32.027199e0,  11.861550e0],
        [-32.024300e0,  11.871270e0],
        [-32.018501e0,  11.880890e0],
        [-32.012699e0,  11.890420e0],
        [-32.004002e0,  11.899870e0],
        [-32.001099e0,  11.909220e0],
        [-31.995300e0,  11.918490e0],
        [-31.989500e0,  11.927680e0],
        [-31.983700e0,  11.936780e0],
        [-31.977900e0,  11.945790e0],
        [-31.972099e0,  11.954730e0],
        [-31.969299e0,  11.963590e0],
        [-31.963501e0,  11.972370e0],
        [-31.957701e0,  11.981070e0],
        [-31.951900e0,  11.989700e0],
        [-31.946100e0,  11.998260e0],
        [-31.940300e0,  12.006740e0],
        [-31.937401e0,  12.015150e0],
        [-31.931601e0,  12.023490e0],
        [-31.925800e0,  12.031760e0],
        [-31.922899e0,  12.039970e0],
        [-31.917101e0,  12.048100e0],
        [-31.911301e0,  12.056170e0],
        [-31.908400e0,  12.064180e0],
        [-31.902599e0,  12.072120e0],
        [-31.896900e0,  12.080010e0],
        [-31.893999e0,  12.087820e0],
        [-31.888201e0,  12.095580e0],
        [-31.885300e0,  12.103280e0],
        [-31.882401e0,  12.110920e0],
        [-31.876600e0,  12.118500e0],
        [-31.873699e0,  12.126030e0],
        [-31.867901e0,  12.133500e0],
        [-31.862101e0,  12.140910e0],
        [-31.859200e0,  12.148270e0],
        [-31.856300e0,  12.155570e0],
        [-31.850500e0,  12.162830e0],
        [-31.844700e0,  12.170030e0],
        [-31.841801e0,  12.177170e0],
        [-31.838900e0,  12.184270e0],
        [-31.833099e0,  12.191320e0],
        [-31.830200e0,  12.198320e0],
        [-31.827299e0,  12.205270e0],
        [-31.821600e0,  12.212170e0],
        [-31.818701e0,  12.219030e0],
        [-31.812901e0,  12.225840e0],
        [-31.809999e0,  12.232600e0],
        [-31.807100e0,  12.239320e0],
        [-31.801300e0,  12.245990e0],
        [-31.798401e0,  12.252620e0],
        [-31.795500e0,  12.259200e0],
        [-31.789700e0,  12.265750e0],
        [-31.786800e0,  12.272240e0],
        ])
    x = rawdata[:, 1]
    y = add_error(rawdata[:, 0], '0 +- 1.8629312528e-03')
    def fcn(x, b):
        return b[0] * (b[1] + x) ** (-1. / b[2])
    prior = gv.gvar([
        '0(20000)', '0(1000)', '0(20)'
        ])
    fit = lsqfit.nonlinear_fit(
        prior=prior, data=(x, y), fcn=fcn, tol=1e-10,
        fitter='gsl_multifit')
    print(fit)
    assert str(fit.p) == '[-2523(297) 46.7(1.2) 0.932(20)]', name

def add_error(y, err):
    return np.array([yi + gv.gvar(err)  for yi in y])


if __name__ == '__main__':
    main()